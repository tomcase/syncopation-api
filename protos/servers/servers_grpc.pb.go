// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServersClient is the client API for Servers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServersClient interface {
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	InsertServer(ctx context.Context, in *InsertServerRequest, opts ...grpc.CallOption) (*InsertServerResponse, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
}

type serversClient struct {
	cc grpc.ClientConnInterface
}

func NewServersClient(cc grpc.ClientConnInterface) ServersClient {
	return &serversClient{cc}
}

func (c *serversClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/Servers/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) InsertServer(ctx context.Context, in *InsertServerRequest, opts ...grpc.CallOption) (*InsertServerResponse, error) {
	out := new(InsertServerResponse)
	err := c.cc.Invoke(ctx, "/Servers/InsertServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, "/Servers/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServersServer is the server API for Servers service.
// All implementations must embed UnimplementedServersServer
// for forward compatibility
type ServersServer interface {
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	InsertServer(context.Context, *InsertServerRequest) (*InsertServerResponse, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error)
	mustEmbedUnimplementedServersServer()
}

// UnimplementedServersServer must be embedded to have forward compatible implementations.
type UnimplementedServersServer struct {
}

func (UnimplementedServersServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedServersServer) InsertServer(context.Context, *InsertServerRequest) (*InsertServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertServer not implemented")
}
func (UnimplementedServersServer) DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedServersServer) mustEmbedUnimplementedServersServer() {}

// UnsafeServersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServersServer will
// result in compilation errors.
type UnsafeServersServer interface {
	mustEmbedUnimplementedServersServer()
}

func RegisterServersServer(s grpc.ServiceRegistrar, srv ServersServer) {
	s.RegisterService(&Servers_ServiceDesc, srv)
}

func _Servers_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Servers/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_InsertServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).InsertServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Servers/InsertServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).InsertServer(ctx, req.(*InsertServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Servers/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Servers_ServiceDesc is the grpc.ServiceDesc for Servers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Servers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Servers",
	HandlerType: (*ServersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServers",
			Handler:    _Servers_ListServers_Handler,
		},
		{
			MethodName: "InsertServer",
			Handler:    _Servers_InsertServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _Servers_DeleteServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servers/servers.proto",
}
